from custom import Target, parse, OS, HOME

def configure(ctx):
    print('[src] ...debug mode? %r' % ctx.options.debug)
    ctx.env.DEBUG = '1' if ctx.options.debug else '0'

def build(ctx):

    optimize_or_debug_flag = ["-g", "-O2"] if ctx.env.DEBUG == '1' else ["-O3"]
    # print optimize_or_debug_flag

    base = Target() \
        .Includes(parse('''
.
../../src
../../submodules/llsg/src
../../submodules/llsg/submodules/tmfont/src
../../submodules/llsg/submodules/d3cpp/src
/usr/local/include/freetype2 
/usr/local/include 
/usr/include 
''')) \
        .Libpath(parse(". /usr/local/lib /usr/lib"))                                           \
        .Cxxflags(parse("-std=c++11") + optimize_or_debug_flag)                                \
        .Cflags(parse("-std=c11"))                                                             \
        .Subtarget("Darwin")                                                                   \
            .Cxxflags(parse("-stdlib=libc++"))                                                 \
            .Linkflags(parse("-stdlib=libc++"))                                                \
            .Frameworkpath(parse("/System/Library/Frameworks"))                                \
            .Pop()                                                                             \
        .Subtarget("Linux")                                                                    \
            .Cxxflags(parse("-fPIC"))                                                          \
            .Libpath(parse("/usr/lib/x86_64-linux-gnu"))                                       \
            .Pop()
    
    # base.Cxxflags(parse("-O3 -std=c++11")).Cflags(parse("-O3 -std=c11"))
    # base.Cxxflags(parse("-g -std=c++11")).Cflags(parse("-g -std=c11"))
    
    def objTarget(name):
        return Target(base, name).Source([name]).Kind("object")
    
    sources = parse('''
../src/lluitk/app.cc
../src/lluitk/canvas.cc
../src/lluitk/event.cc
../src/lluitk/grid.cc
../src/lluitk/os.cc
../src/lluitk/simple_widget.cc
../src/lluitk/style.cc
../src/lluitk/textedit.cc
../src/lluitk/widget.cc
../submodules/llsg/src/any.cc
../submodules/llsg/src/llsg.cc
../submodules/llsg/src/llsg_opengl.cc
../submodules/llsg/src/opengl.cc
../submodules/llsg/src/transition.cc
../submodules/llsg/src/utf8.cc
../submodules/llsg/submodules/tmfont/src/tmfont.cc
    ''')
    
    # polycover_unittest.cc
    
    sources_obj = [objTarget(n) for n in sources]
    
    ################################################################################
    # Program: polycover
    ################################################################################
    
    lluitk-example1 = Target(base, "lluitk-example1") \
        .Kind("program")                  \
        .Use(sources)                     \
        .Source( parse("example1.cc"))   \
        .Lib(parse("m"))     \
        .Subtarget("Darwin")                                          \
            .Lib(parse("glfw3 boost_system-mt boost_filesystem-mt"))     \
            .Framework(parse("OpenGL IOKit Cocoa CoreVideo"))         \
            .Pop()                                                 \
        .Subtarget("Linux")               \
            .Lib(parse("glfw GL ssl crypto GLU pthread boost_system boost_filesystem "))         \
            .Pop()
    
    ################################################################################
    # targets
    ################################################################################
    
    targets = [lluitk-example1]


    ################################################################################
    # tasks
    ################################################################################
    

    for obj in sources_obj:
        # print "------------------", obj.name
        # print "------------------", obj.Subtarget(OS).GetValue("cxxflags")
        ctx.objects(
            target        = obj.name,
            source        = obj.Subtarget(OS).GetValue("source"),
            includes      = obj.Subtarget(OS).GetValue("includes"),
            cxxflags      = obj.Subtarget(OS).GetValue("cxxflags")
        )

    for target in targets:
        if target.kind == "program":
            ctx.program(
                target        = target.name,
                vnum          = '0.1',
                install_path  = '${HOME}/local/bin'.replace("${HOME}",HOME),
                use           = target.Subtarget(OS).GetValue("use"),
                source        = target.Subtarget(OS).GetValue("source"),
                includes      = target.Subtarget(OS).GetValue("includes"),
                cxxflags      = target.Subtarget(OS).GetValue("cxxflags"),
                linkflags     = target.Subtarget(OS).GetValue("linkflags"),
                libpath       = target.Subtarget(OS).GetValue("libpath"),
                lib           = target.Subtarget(OS).GetValue("lib"),
                frameworkpath = target.Subtarget(OS).GetValue("frameworkpath"),
                framework     = target.Subtarget(OS).GetValue("framework")
            )
        elif target.kind == "shlib":
            ctx.shlib(
                target        = target.name,
                # vnum          = '0.1',
                install_path  = '${HOME}/local/lib'.replace("${HOME}",HOME),
                use           = target.Subtarget(OS).GetValue("use"),
                source        = target.Subtarget(OS).GetValue("source"),
                includes      = target.Subtarget(OS).GetValue("includes"),
                cxxflags      = target.Subtarget(OS).GetValue("cxxflags") + optimize_or_debug_flag,
                linkflags     = target.Subtarget(OS).GetValue("linkflags"),
                libpath       = target.Subtarget(OS).GetValue("libpath"),
                lib           = target.Subtarget(OS).GetValue("lib"),
                frameworkpath = target.Subtarget(OS).GetValue("frameworkpath"),
                framework     = target.Subtarget(OS).GetValue("framework")
            )
